Starting nREPL server...
/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/bin/java -Dfile.encoding=UTF-8 -XX:-OmitStackTraceInFastThrow -Dclojure.compile.path=/Users/alvaro/Documents/sandbox/clojure/potter-kata2/target/base+system+user+dev/classes -Dpotter-kata2.version=0.1.0-SNAPSHOT -Dclojure.debug=false -Didea.launcher.port=7538 "-Didea.launcher.bin.path=/Applications/IntelliJ IDEA.app/Contents/bin" -classpath "/Users/alvaro/Documents/sandbox/clojure/potter-kata2/test:/Users/alvaro/Documents/sandbox/clojure/potter-kata2/src:/Users/alvaro/Documents/sandbox/clojure/potter-kata2/dev-resources:/Users/alvaro/Documents/sandbox/clojure/potter-kata2/resources:/Users/alvaro/Documents/sandbox/clojure/potter-kata2/target/base+system+user+dev/classes:/Users/alvaro/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:/Users/alvaro/.m2/repository/net/cgrand/regex/1.1.0/regex-1.1.0.jar:/Users/alvaro/.m2/repository/swiss-arrows/swiss-arrows/1.0.0/swiss-arrows-1.0.0.jar:/Users/alvaro/.m2/repository/gui-diff/gui-diff/0.5.0/gui-diff-0.5.0.jar:/Users/alvaro/.m2/repository/org/clojars/trptcolin/sjacket/0.1.3/sjacket-0.1.3.jar:/Users/alvaro/.m2/repository/dynapath/dynapath/0.2.0/dynapath-0.2.0.jar:/Users/alvaro/.m2/repository/org/clojure/tools.macro/0.1.5/tools.macro-0.1.5.jar:/Users/alvaro/.m2/repository/org/clojure/tools.nrepl/0.2.12/tools.nrepl-0.2.12.jar:/Users/alvaro/.m2/repository/utilize/utilize/0.2.3/utilize-0.2.3.jar:/Users/alvaro/.m2/repository/slingshot/slingshot/0.10.3/slingshot-0.10.3.jar:/Users/alvaro/.m2/repository/commons-codec/commons-codec/1.9/commons-codec-1.9.jar:/Users/alvaro/.m2/repository/clojure-complete/clojure-complete/0.2.4/clojure-complete-0.2.4.jar:/Users/alvaro/.m2/repository/joda-time/joda-time/2.0/joda-time-2.0.jar:/Users/alvaro/.m2/repository/clj-time/clj-time/0.6.0/clj-time-0.6.0.jar:/Users/alvaro/.m2/repository/net/cgrand/parsley/0.9.1/parsley-0.9.1.jar:/Users/alvaro/.m2/repository/org/clojure/tools.namespace/0.2.4/tools.namespace-0.2.4.jar:/Users/alvaro/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar:/Users/alvaro/.m2/repository/org/clojure/math.combinatorics/0.0.7/math.combinatorics-0.0.7.jar:/Users/alvaro/.m2/repository/midje/midje/1.6.3/midje-1.6.3.jar:/Users/alvaro/.m2/repository/ordered/ordered/1.2.0/ordered-1.2.0.jar:/Users/alvaro/.m2/repository/org/clojure/core.unify/0.5.2/core.unify-0.5.2.jar:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar" com.intellij.rt.execution.application.AppMain clojure.main -i /private/var/folders/6p/p1cct37x19bgtnss368w24mm0000gn/T/form-init442502075522691563.clj
#error {
 :cause Could not locate potter_kata2/core__init.class or potter_kata2/core.clj on classpath. Please check that namespaces with dashes use underscores in the Clojure file name.
 :via
 [{:type java.io.FileNotFoundException
   :message Could not locate potter_kata2/core__init.class or potter_kata2/core.clj on classpath. Please check that namespaces with dashes use underscores in the Clojure file name.
   :at [clojure.lang.RT load RT.java 456]}]
 :trace
 [[clojure.lang.RT load RT.java 456]
  [clojure.lang.RT load RT.java 419]
  [clojure.core$load$fn__5677 invoke core.clj 5893]
  [clojure.core$load invokeStatic core.clj 5892]
  [clojure.core$load doInvoke core.clj 5876]
  [clojure.lang.RestFn invoke RestFn.java 408]
  [clojure.core$load_one invokeStatic core.clj 5697]
  [clojure.core$load_one invoke core.clj 5692]
  [clojure.core$load_lib$fn__5626 invoke core.clj 5737]
  [clojure.core$load_lib invokeStatic core.clj 5736]
  [clojure.core$load_lib doInvoke core.clj 5717]
  [clojure.lang.RestFn applyTo RestFn.java 142]
  [clojure.core$apply invokeStatic core.clj 648]
  [clojure.core$load_libs invokeStatic core.clj 5774]
  [clojure.core$load_libs doInvoke core.clj 5758]
  [clojure.lang.RestFn applyTo RestFn.java 137]
  [clojure.core$apply invokeStatic core.clj 648]
  [clojure.core$require invokeStatic core.clj 5796]
  [clojure.core$require doInvoke core.clj 5796]
  [clojure.lang.RestFn invoke RestFn.java 408]
  [user$eval5 invokeStatic form-init442502075522691563.clj 1]
  [user$eval5 invoke form-init442502075522691563.clj 1]
  [clojure.lang.Compiler eval Compiler.java 6927]
  [clojure.lang.Compiler eval Compiler.java 6916]
  [clojure.lang.Compiler eval Compiler.java 6916]
  [clojure.lang.Compiler load Compiler.java 7379]
  [clojure.lang.Compiler loadFile Compiler.java 7317]
  [clojure.main$load_script invokeStatic main.clj 275]
  [clojure.main$init_opt invokeStatic main.clj 277]
  [clojure.main$init_opt invoke main.clj 277]
  [clojure.main$initialize invokeStatic main.clj 308]
  [clojure.main$null_opt invokeStatic main.clj 342]
  [clojure.main$null_opt invoke main.clj 339]
  [clojure.main$main invokeStatic main.clj 421]
  [clojure.main$main doInvoke main.clj 384]
  [clojure.lang.RestFn invoke RestFn.java 421]
  [clojure.lang.Var invoke Var.java 383]
  [clojure.lang.AFn applyToHelper AFn.java 156]
  [clojure.lang.Var applyTo Var.java 700]
  [clojure.main main main.java 37]
  [sun.reflect.NativeMethodAccessorImpl invoke0 NativeMethodAccessorImpl.java -2]
  [sun.reflect.NativeMethodAccessorImpl invoke NativeMethodAccessorImpl.java 62]
  [sun.reflect.DelegatingMethodAccessorImpl invoke DelegatingMethodAccessorImpl.java 43]
  [java.lang.reflect.Method invoke Method.java 483]
  [com.intellij.rt.execution.application.AppMain main AppMain.java 144]]}
Connecting to local nREPL server...
Clojure 1.8.0
nREPL server started on port 55111 on host 127.0.0.1 - nrepl://127.0.0.1:55111
Loading test/potter_kata2/core_test.clj...
WARNING: cat already refers to: #'clojure.core/cat in namespace: net.cgrand.parsley.fold, being replaced by: #'net.cgrand.parsley.fold/cat
WARNING: update already refers to: #'clojure.core/update in namespace: utilize.map, being replaced by: #'utilize.map/update
WARNING: update already refers to: #'clojure.core/update in namespace: clojure.math.combinatorics, being replaced by: #'clojure.math.combinatorics/update
Run `(doc midje)` for Midje usage.
CompilerException java.lang.RuntimeException: Unable to resolve symbol: candidates-next-gen in this context, compiling:(/Users/alvaro/Documents/sandbox/clojure/potter-kata2/test/potter_kata2/core_test.clj:53:76)
(in-ns 'potter-kata2.core-test
       )
=> #object[clojure.lang.Namespace 0x4f5696b1 "potter-kata2.core-test"]
Loading test/potter_kata2/core_test.clj... done

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:76)
    Expected: 51.2
      Actual: 1
(find-maxes-one-generation (split-in-groups-of-1 cheap))
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
(->> cheap
     (map #(-> [%]))
     find-maxes-one-generation)
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation)
=> ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen)
=>
({:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[2]], :rest ([[1]] [[1]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[2]], :rest ([[1]] [[1]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[3]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[4]] [[5]])}
 {:selected [[3]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[4]] [[5]])}
 {:selected [[4]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[5]])}
 {:selected [[5]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[4]])})
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen)
IllegalArgumentException No matching clause: 0  potter-kata2.core-test/discount (core_test.clj:13)
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen)
=>
({:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[2]], :rest ([[1]] [[1]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[2]], :rest ([[1]] [[1]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[3]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[4]] [[5]])}
 {:selected [[3]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[4]] [[5]])}
 {:selected [[4]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[5]])}
 {:selected [[5]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[4]])})
Loading test/potter_kata2/core_test.clj... done

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:79)
    Expected: 51.2
      Actual: 1
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen)
=>
({:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[2]], :rest ([[1]] [[1]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[2]], :rest ([[1]] [[1]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[3]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[4]] [[5]])}
 {:selected [[3]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[4]] [[5]])}
 {:selected [[4]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[5]])}
 {:selected [[5]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[4]])})
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen)
=> (() () () () () () () ())
Loading test/potter_kata2/core_test.clj...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: generation in this context, compiling:(/Users/alvaro/Documents/sandbox/clojure/potter-kata2/test/potter_kata2/core_test.clj:62:84)
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     first
     find-next-gen)
=> (() ())
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     first
     )
=> {:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     first
     )
=> {:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     first
     find-single-xxx)
IllegalStateException Attempting to call unbound fn: #'potter-kata2.core-test/find-single-xxx  clojure.lang.Var$Unbound.throwArity (Var.java:43)
Loading test/potter_kata2/core_test.clj...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: generation in this context, compiling:(/Users/alvaro/Documents/sandbox/clojure/potter-kata2/test/potter_kata2/core_test.clj:62:84)
Loading test/potter_kata2/core_test.clj... done

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:82)
    Expected: 51.2
      Actual: 1
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     first
     find-single-xxx)
=> ()
Loading test/potter_kata2/core_test.clj... done

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:82)
    Expected: 51.2
      Actual: 1
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     first
     )
=> {:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     first
     find-single-xxx
     )
=> ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     )
=>
(([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
 ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     (map fitness-fn)
     )
=> (0 0 0 0 0 0 0 0)
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     )
=>
(([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
 ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     first
     )
=> ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     first
     fitness-fn
     )
=> 0
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     first
     (map fitness-fn)
     )
=> (5 5 5 5 5 5)
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     (map #(map fitness-fn %))
     )
=> ((5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5))
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     )
=>
(([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
 ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     )
=>
(([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
 ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     find-next-gen
     )
IllegalArgumentException No value supplied for key: [[4 5]]  clojure.lang.PersistentHashMap.create (PersistentHashMap.java:77)
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     candidates-next-gen
     )
=>
({:selected ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]]),
  :rest (([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
         ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))}
 {:selected ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]]),
  :rest (([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
         ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))}
 {:selected ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]]),
  :rest (([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
         ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))}
 {:selected ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]]),
  :rest (([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
         ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))}
 {:selected ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]]),
  :rest (([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
         ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))}
 {:selected ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]]),
  :rest (([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
         ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))}
 {:selected ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]]),
  :rest (([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))}
 {:selected ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]),
  :rest (([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
         ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]]))})
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     )
=>
(([[1 2 1 2 1 3 1 3 1 4 1 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[1 2 1 2 1 3 1 3 1 4 1 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[2 1 2 1 2 3 2 3 2 4 2 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[2 1 2 1 2 3 2 3 2 4 2 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[3 1 3 1 3 2 3 2 3 4 3 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[3 1 3 1 3 2 3 2 3 4 3 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[4 1 4 1 4 2 4 2 4 3 4 3 4 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[5 1 5 1 5 2 5 2 5 3 5 3 5 4 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]))
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     )
=>
(([[1 2 1 2 1 3 1 3 1 4 1 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[1 2 1 2 1 3 1 3 1 4 1 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[2 1 2 1 2 3 2 3 2 4 2 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[2 1 2 1 2 3 2 3 2 4 2 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[3 1 3 1 3 2 3 2 3 4 3 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[3 1 3 1 3 2 3 2 3 4 3 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[4 1 4 1 4 2 4 2 4 3 4 3 4 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[5 1 5 1 5 2 5 2 5 3 5 3 5 4 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]))
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     )
=> ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     find-maxes-one-generation
     candidates-next-gen

     )
=>
({:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[2]], :rest ([[1]] [[1]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[2]], :rest ([[1]] [[1]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[3]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[4]] [[5]])}
 {:selected [[3]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[4]] [[5]])}
 {:selected [[4]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[5]])}
 {:selected [[5]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[4]])})
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))

     )
=> ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])
(->> cheap
     split-in-groups-of-1


     )
=> ([1] [1] [2] [2] [3] [3] [4] [5])
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen

     )
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation


     )
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
(->> cheap
     split-in-groups-of-1
     (map #(-> [%]))
     )
=> ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])
Loading test/potter_kata2/core_test.clj... done

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:82)
    Expected: 51.2
      Actual: 1
(->> cheap
     split-in-groups-of-1
     )
=> ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     )
=> ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])
Loading test/potter_kata2/core_test.clj... done

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:82)
    Expected: 51.2
      Actual: 1
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     )
=>
(([[1 2 1 2 1 3 1 3 1 4 1 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[1 2 1 2 1 3 1 3 1 4 1 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[1 2 1 2 1 3 1 3 1 4 1 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[2 1 2 1 2 3 2 3 2 4 2 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[2 1 2 1 2 3 2 3 2 4 2 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[2 1 2 1 2 3 2 3 2 4 2 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[3 1 3 1 3 2 3 2 3 4 3 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[3 1 3 1 3 2 3 2 3 4 3 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]
  [[3 1 3 1 3 2 3 2 3 4 3 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[4 1 4 1 4 2 4 2 4 3 4 3 4 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[4 1 4 1 4 2 4 2 4 3 4 3 4 5 5 1 5 1 5 2 5 2 5 3 5 3 5 4]])
 ([[5 1 5 1 5 2 5 2 5 3 5 3 5 4 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 1 2 1 2 1 3 1 3 1 4 1 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 2 1 2 1 2 3 2 3 2 4 2 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 3 1 3 1 3 2 3 2 3 4 3 5]]
  [[5 1 5 1 5 2 5 2 5 3 5 3 5 4 4 1 4 1 4 2 4 2 4 3 4 3 4 5]]))
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     )
=> ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     )
=>
({:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[1]], :rest ([[1]] [[2]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[2]], :rest ([[1]] [[1]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[2]], :rest ([[1]] [[1]] [[2]] [[3]] [[3]] [[4]] [[5]])}
 {:selected [[3]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[4]] [[5]])}
 {:selected [[3]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[4]] [[5]])}
 {:selected [[4]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[5]])}
 {:selected [[5]], :rest ([[1]] [[1]] [[2]] [[2]] [[3]] [[3]] [[4]])})
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     )
=>
(([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
 ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     )
=>
(([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
 ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))
Loading test/potter_kata2/core_test.clj... done

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:82)
    Expected: 51.2
      Actual: 1
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     )
=> ([4 1] [5 1])
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     )
=>
(([1 2] [1 2] [1 3] [1 3] [1 4] [1 5])
 ([1 2] [1 2] [1 3] [1 3] [1 4] [1 5])
 ([2 1] [2 1] [2 3] [2 3] [2 4] [2 5])
 ([2 1] [2 1] [2 3] [2 3] [2 4] [2 5])
 ([3 1] [3 1] [3 2] [3 2] [3 4] [3 5])
 ([3 1] [3 1] [3 2] [3 2] [3 4] [3 5])
 ([4 1] [4 1] [4 2] [4 2] [4 3] [4 3] [4 5])
 ([5 1] [5 1] [5 2] [5 2] [5 3] [5 3] [5 4]))
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     )
=> ([4 1] [5 1])
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     )
=>
(([1 2] [1 2] [1 3] [1 3] [1 4] [1 5])
 ([1 2] [1 2] [1 3] [1 3] [1 4] [1 5])
 ([2 1] [2 1] [2 3] [2 3] [2 4] [2 5])
 ([2 1] [2 1] [2 3] [2 3] [2 4] [2 5])
 ([3 1] [3 1] [3 2] [3 2] [3 4] [3 5])
 ([3 1] [3 1] [3 2] [3 2] [3 4] [3 5])
 ([4 1] [4 1] [4 2] [4 2] [4 3] [4 3] [4 5])
 ([5 1] [5 1] [5 2] [5 2] [5 3] [5 3] [5 4]))
Loading test/potter_kata2/core_test.clj...

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:82)
    Expected: 51.2
      Actual: 1
CompilerException clojure.lang.ArityException: Wrong number of args (7) passed to: core/identity, compiling:(/Users/alvaro/Documents/sandbox/clojure/potter-kata2/test/potter_kata2/core_test.clj:91:1)
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     )
=>
(([1 2] [1 2] [1 3] [1 3] [1 4] [1 5])
 ([1 2] [1 2] [1 3] [1 3] [1 4] [1 5])
 ([2 1] [2 1] [2 3] [2 3] [2 4] [2 5])
 ([2 1] [2 1] [2 3] [2 3] [2 4] [2 5])
 ([3 1] [3 1] [3 2] [3 2] [3 4] [3 5])
 ([3 1] [3 1] [3 2] [3 2] [3 4] [3 5])
 ([4 1] [4 1] [4 2] [4 2] [4 3] [4 3] [4 5])
 ([5 1] [5 1] [5 2] [5 2] [5 3] [5 3] [5 4]))
Loading test/potter_kata2/core_test.clj... done

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:82)
    Expected: 51.2
      Actual: 1
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     )
=>
(([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
 ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))
Loading test/potter_kata2/core_test.clj...

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:82)
    Expected: 51.2
      Actual: 1
CompilerException clojure.lang.ArityException: Wrong number of args (8) passed to: core/identity, compiling:(/Users/alvaro/Documents/sandbox/clojure/potter-kata2/test/potter_kata2/core_test.clj:91:1)
((fn [coll] (apply ->)) [[1 2 3] [4 5 6]])
CompilerException java.lang.RuntimeException: Can't take value of a macro: #'clojure.core/->, compiling:(/private/var/folders/6p/p1cct37x19bgtnss368w24mm0000gn/T/form-init442502075522691563.clj:1:13)
((fn [coll] (apply (fn [i] i))) [[1 2 3] [4 5 6]])
ArityException Wrong number of args (1) passed to: core/apply  clojure.lang.AFn.throwArity (AFn.java:429)
((fn [[coll]] coll) [[1 2 3] [4 5 6]])
=> [1 2 3]
Loading test/potter_kata2/core_test.clj... done

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:82)
    Expected: 51.2
      Actual: 1
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     )
=>
(([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
 ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     )
=>
(([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[1 2]] [[1 2]] [[1 3]] [[1 3]] [[1 4]] [[1 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[2 1]] [[2 1]] [[2 3]] [[2 3]] [[2 4]] [[2 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[3 1]] [[3 1]] [[3 2]] [[3 2]] [[3 4]] [[3 5]])
 ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]])
 ([[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]]))
((fn [coll] (apply concat)) [[1 2 3] [4 5 6]])
ArityException Wrong number of args (1) passed to: core/apply  clojure.lang.AFn.throwArity (AFn.java:429)
((fn [coll] (apply concat coll)) [[1 2 3] [4 5 6]])
=> (1 2 3 4 5 6)
((fn [coll] (apply concat coll)) [[[1 2 3] [4 5 6]]])
=> ([1 2 3] [4 5 6])
Loading test/potter_kata2/core_test.clj... done

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:82)
    Expected: 51.2
      Actual: 1
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-neaxt-gen
     find-next-gen
     find-maxes-one-generation
     )
CompilerException java.lang.RuntimeException: Unable to resolve symbol: candidates-neaxt-gen in this context, compiling:(/private/var/folders/6p/p1cct37x19bgtnss368w24mm0000gn/T/form-init442502075522691563.clj:1:1)
Loading test/potter_kata2/core_test.clj... done

FAIL "about books - price the books at the cheapest possible" at (core_test.clj:82)
    Expected: 51.2
      Actual: 1
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     )
=> ([4 1] [4 1] [4 2] [4 2] [4 3] [4 3] [4 5] [5 1] [5 1] [5 2] [5 2] [5 3] [5 3] [5 4])
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     (map #(-> [%]))
     )
=> ([[4 1]] [[4 1]] [[4 2]] [[4 2]] [[4 3]] [[4 3]] [[4 5]] [[5 1]] [[5 1]] [[5 2]] [[5 2]] [[5 3]] [[5 3]] [[5 4]])
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     (map #(-> [%]))
     find-next-gen
     )
=> (() () () () () () () () () () () () () ())
(->> cheap
     split-in-groups-of-1
     find-maxes-one-generation
     candidates-next-gen
     find-next-gen
     find-maxes-one-generation
     find-next-gen
     )
=> (() () () () () () () () () () () () () ())
cheap
=> [1 1 2 2 3 3 4 5]
Loading test/potter_kata2/core_test_direct.clj... done
(in-ns 'potter-kata2.core-test-direct)
=> #object[clojure.lang.Namespace 0x6a2eed3a "potter-kata2.core-test-direct"]
cheap
=> [1 1 2 2 3 3 4 5]
Loading test/potter_kata2/core_test_direct.clj...
CompilerException java.lang.Exception: :only/:refer value must be a sequential collection of symbols, compiling:(/Users/alvaro/Documents/sandbox/clojure/potter-kata2/test/potter_kata2/core_test_direct.clj:1:1)
Loading test/potter_kata2/core_test_direct.clj...
CompilerException java.lang.IllegalAccessError: :fitness-fn does not exist, compiling:(/Users/alvaro/Documents/sandbox/clojure/potter-kata2/test/potter_kata2/core_test_direct.clj:1:1)
Loading test/potter_kata2/core_test_direct.clj...
CompilerException java.lang.IllegalAccessError: :fitness-fn does not exist, compiling:(/Users/alvaro/Documents/sandbox/clojure/potter-kata2/test/potter_kata2/core_test_direct.clj:1:1)
Loading test/potter_kata2/core_test_direct.clj... done
(fitness-fn)
CompilerException java.lang.RuntimeException: Unable to resolve symbol: fitness-fn in this context, compiling:(/private/var/folders/6p/p1cct37x19bgtnss368w24mm0000gn/T/form-init442502075522691563.clj:1:1)
(potter-kata2.core-test/fitness-fn)
ArityException Wrong number of args (0) passed to: core-test/fitness-fn  clojure.lang.AFn.throwArity (AFn.java:429)
(max [[1 \a] [2 \b]])
=> [[1 \a] [2 \b]]
(apply max [[1 \a] [2 \b]])
ClassCastException clojure.lang.PersistentVector cannot be cast to java.lang.Number  clojure.lang.Numbers.gt (Numbers.java:229)
(map first [[1 \a] [2 \b]])
=> (1 2)
(apply max (map first [[1 \a] [2 \b]]))
=> 2
(filter #(= (first %) (apply max (map first [[1 \a] [2 \b]]))) [[1 \a] [2 \b]])
=> ([2 \b])
(first (filter #(= (first %) (apply max (map first [[1 \a] [2 \b]]))) [[1 \a] [2 \b]]))
=> [2 \b]
Loading test/potter_kata2/core_test_direct.clj... done
(assign 1 [])
=> nil
(assign 1 [[]])
IllegalArgumentException Key must be integer  clojure.lang.APersistentVector.invoke (APersistentVector.java:292)
(assign 1 [])
=> nil
Loading test/potter_kata2/core_test_direct.clj... done
(assign 1 [])
=> ()
Loading test/potter_kata2/core_test_direct.clj... done
(assign 1 [])
ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  potter-kata2.core-test-direct/assign/fn--13075 (core_test_direct.clj:15)
(let [ele 1
      groups []] (concat [ele] (map #(conj % ele) groups)))
=> (1)
(let [ele 1
      groups []] (concat [[ele]] (map #(conj % ele) groups)))
=> ([1])
